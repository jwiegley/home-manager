{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.pet;

  snippetType = types.submodule {
    options = {
      description = mkOption {
        type = types.str;
        default = "";
        example = "Show expiration date of SSL certificate";
        description = ''
          description of the snippet
        '';
      };

      command = mkOption {
        type = types.str;
        default = "";
        example =
          "echo | openssl s_client -connect example.com:443 2>/dev/null |openssl x509 -dates -noout";
        description = ''
          the command
        '';
      };

      output = mkOption {
        type = types.str;
        default = "";
        example = ''
          notBefore=Nov  3 00:00:00 2015 GMT
          notAfter=Nov 28 12:00:00 2018 GMT
        '';
        description = ''
          example output of the command
        '';
      };
    };
  };

  mkSnippetConfigPart = snippet:
    let
      esc = escape [ ''"'' ];
      desc = esc snippet.description;
      comm = esc snippet.command;
      out = esc snippet.output;
    in ''
      [[snippets]]
        description = "${desc}"
        command = "${comm}"
        output = "${out}"
    '';

in {
  options.programs.pet = {
    enable = mkEnableOption "pet";

    snippetfile = mkOption {
      type = types.str;
      default = "${config.xdg.configHome}/pet/snippet.toml";
      description = ''
        specify snippet directory
      '';
    };

    editor = mkOption {
      type = types.str;
      default = "vim";
      description = ''
        your favorite text editor
      '';
    };

    column = mkOption {
      type = types.int;
      default = 40;
      description = ''
        column size for list command
      '';
    };

    selectcmd = mkOption {
      type = types.enum [ "fzf" "peco" ];
      default = "fzf";
      description = ''
        selector command for edit command (fzf or peco)
      '';
    };

    sortby = mkOption {
      type = types.enum [
        "recency"
        "-recency"
        "description"
        "-description"
        "command"
        "-command"
        "output"
        "-output"
      ];
      default = "description";
      description = ''
        specify how snippets get sorted (recency (default), -recency, description, -description, command, -command, output, -output)
      '';
    };

    snippets = mkOption {
      type = types.listOf snippetType;
      default = [ ];
      description = ''
        saved snippets
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ pkgs.pet pkgs."${cfg.selectcmd}" ];
    home.file."${cfg.snippetfile}".text =
      let configStr = concatMapStringsSep "\n" mkSnippetConfigPart cfg.snippets;
      in ''
        # Generated by Home Manager.

        ${configStr}
      '';
    home.file."${config.xdg.configHome}/pet/config.toml".text = let
      esc = escape [ ''"'' ];
      sf = esc cfg.snippetfile;
      edit = esc cfg.editor;
      col = toString cfg.column;
      sc = esc cfg.selectcmd;
      sb = esc cfg.sortby;
    in ''
      # Generated by Home Manager.

      [General]
        snippetfile = "${sf}"
        editor = "${edit}"
        column = ${col}
        selectcmd = "${sc}"
        sortby = "${sb}"
    '';
  };
}
