{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.kitty;

  eitherStrBoolInt = with types; either str (either bool int);

  optionalPackage = opt:
    optional (opt != null && opt.package != null) opt.package;

  fontType = types.submodule {
    options = {
      package = mkOption {
        type = types.nullOr types.package;
        default = null;
        example = literalExample "pkgs.dejavu_fonts";
        description = ''
          Package providing the font. This package will be installed
          to your profile. If <literal>null</literal> then the font
          is assumed to already be available in your profile.
        '';
      };

      name = mkOption {
        type = types.str;
        example = "DejaVu Sans 8";
        description = ''
          The family name and size of the font within the package.
        '';
      };
    };
  };

  toKittyConfig = generators.toKeyValue {
    mkKeyValue = key: value:
    let
      value' =
        if isBool value then (if value then "yes" else "no")
        else toString value;
    in
      "${key} ${value'}";
  };

  toKittyKeybindings = generators.toKeyValue {
    mkKeyValue = key: command: "map ${key} ${command}";
  };
in

{
  options.programs.kitty = {
    enable = mkEnableOption "Kitty terminal emulator";

    config = mkOption {
      type = types.attrsOf eitherStrBoolInt;
      default = {};
      example = literalExample ''
        {
          scrollback_lines = 10000;
          enable_audio_bell = false;
          update_check_interval = 0;
        }
      '';
      description = ''
        Configuration written to
        <filename>~/.config/kitty/kitty.conf</filename>. See
        <link xlink:href="https://sw.kovidgoyal.net/kitty/conf.html" />
        for the documentation.
      '';
    };

    font = mkOption {
      type = fontType;
      default = null;
      description = "The font to use.";
    };

    keybindings = mkOption {
      type = types.attrsOf types.str;
      default = {};
      description = "Mapping of keybindings to actions.";
      example = literalExample ''
        {
          "ctrl+c" = "copy_or_interrupt";
          "ctrl+f>2" = "set_font_size 20";
        }
      '';
    };

    extraConfig = mkOption {
      default = "";
      type = types.str;
      description = "Additional configuration to add.";
      example = "";
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ pkgs.kitty ] ++ optionalPackage cfg.font;

    xdg.configFile."kitty/kitty.conf".text = ''
      # Generated by Home Manager.
      # See https://sw.kovidgoyal.net/kitty/conf.html

      font_family ${cfg.font.name}

      ${toKittyConfig cfg.config}

      ${toKittyKeybindings cfg.keybindings}

      ${cfg.extraConfig}
    '';
  };
}
