{ config, lib, pkgs, ... }:

with lib;
let
  cfg = config.programs.aerc;
  primitive = with types; ((type: either type (listOf type))
    (nullOr (oneOf [ str int bool float ]))) // {
      description = "values (null, bool, int, string of float) or a list of values, that will be joined with a comma";
    };
  confSection = types.attrsOf primitive;
  confSections = types.attrsOf confSection;
  sectionsOrLines = types.either types.lines confSections;
in {
  meta.maintainers = with lib.hm.maintainers; [ lukasngl ];

  options.programs.aerc = {

    enable = mkEnableOption "aerc";

    extraAccounts = mkOption {
      type = sectionsOrLines;
      default = { };
      example = literalExpression
        ''{ Work = { source = "maildir://~/Maildir/work"; }; }'';
      description = ''
        Extra lines added to <filename>$HOME/.config/aerc/accounts.conf</filename>.
        See aerc-config(5).
      '';
    };

    extraBinds = mkOption {
      type = sectionsOrLines;
      default = { };
      example = literalExpression ''{ messages = { q = ":quit<Enter>"; }; }'';
      description = ''
        Extra lines added to <filename>$HOME/.config/aerc/binds.conf</filename>.
        Global keybindings can be set in the `global` section.
        See aerc-config(5).
      '';
    };

    extraConfig = mkOption {
      type = sectionsOrLines;
      default = { };
      example = literalExpression ''{ ui = { sort = "-r date"; }; }'';
      description = ''
        Extra lines added to <filename>$HOME/.config/aerc/aerc.conf</filename>.
        See aerc-config(5).
      '';
    };

    stylesets = mkOption {
      type = with types; attrsOf (either confSection lines);
      default = { };
      example = literalExpression ''
        { default = { ui = { "tab.selected.reverse" = toggle; }; }; };
      '';
      description = ''
        Stylesets added to <filename>$HOME/.config/aerc/stylesets/</filename>.
        See aerc-stylesets(7).
      '';
    };
    templates = mkOption {
      type = with types; attrsOf lines;
      default = { };
      example = literalExpression ''
        { new_message = "Hello!"; };
      '';
      description = ''
        Templates added to <filename>$HOME/.config/aerc/templates/</filename>.
        See aerc-templates(7).
      '';
    };
  };

  config = let
    toINI = conf: # quirk: global section is prepended w/o section heading
      let
        mkValueString = v:
          with builtins;
          if isList v then # join with comma
            concatStringsSep "," (map (generators.mkValueStringDefault {}) v)
          else
            generators.mkValueStringDefault {} v;
        mkKeyValue =
          generators.mkKeyValueDefault { inherit mkValueString; } " = ";
        global = conf.global or { };
        local = removeAttrs conf [ "global" ];
      in ''
        ${generators.toKeyValue { inherit mkKeyValue; } global}
        ${generators.toINI { inherit mkKeyValue; } local}
      '';
    mkINI = conf: if builtins.isString conf then conf else toINI conf;
    mkStyleset = attrsets.mapAttrs' (k: v: 
    let value = if builtins.isString v then v else mkINI { global = v; }; in
    {
      name = "aerc/stylesets/${k}";
      value.text = ''
        # Generated by Home Manager.
        ${value}
      '';
    });
    mkTemplates = attrsets.mapAttrs' (k: v: {
      name = "aerc/templates/${k}";
      value.text = v;
    });
  in mkIf cfg.enable {
    home.packages = [ pkgs.aerc ];
    xdg.configFile = {
      "aerc/accounts.conf" =
        mkIf (cfg.extraAccounts != "" && cfg.extraAccounts != { }) {
          text = ''
            # Generated by Home Manager.
            ${mkINI cfg.extraAccounts}
          '';
        };
      "aerc/aerc.conf" =
        mkIf (cfg.extraConfig != "" && cfg.extraConfig != { }) {
          text = ''
            # Generated by Home Manager.
            ${mkINI cfg.extraConfig}
          '';
        };
      "aerc/binds.conf" =
        mkIf (cfg.extraBinds != "" && cfg.extraBinds != { }) {
          text = ''
            # Generated by Home Manager.
            ${mkINI cfg.extraBinds}
          '';
        };
      }
      // (mkStyleset cfg.stylesets)
      // (mkTemplates cfg.templates);
  };
}
